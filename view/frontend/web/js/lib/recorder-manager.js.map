{"version":3,"file":"recorder-manager.js","names":["RecorderManager","sessionWorker","_proto","prototype","sayHello","init","instance","fetch","then","response","json","content","spawn","Worker","assetUrl","sessionLoader","initInstance"],"sources":["../../ts/js/lib/recorder-manager.ts"],"sourcesContent":["import {spawn} from \"threads\";\nimport {SessionWorker} from \"VMPL_BugReplay/js/api/session\";\nimport {ConfigWorkerContent} from \"VMPL_BugReplay/js/api/response\";\n\nexport default class RecorderManager {\n    protected constructor(protected readonly sessionWorker: SessionWorker) {\n    }\n\n    sayHello() {\n        this.sessionWorker.sayHello();\n    }\n\n    static init(instance: string = 'BugReplay'): Promise<RecorderManager> {\n        return fetch('/vmpl-bug-report/config/worker')\n            .then(response => response.json())\n            .then((content: ConfigWorkerContent) => spawn(new Worker(content.assetUrl.sessionLoader)))\n            .then((sessionWorker: SessionWorker) => {\n                return sessionWorker.initInstance(instance)\n                    .then(() => new RecorderManager((sessionWorker)))\n            })\n    }\n}\n"],"mappings":";;;MAIqBA,eAAe;IAAA;;IAChC,SAAAA,gBAAyCC,aAA4B,EAAE;MAAA,KAA9BA,aAA4B,GAA5BA,aAA4B;IACrE;IAAC,IAAAC,MAAA,GAAAF,eAAA,CAAAG,SAAA;IAAAD,MAAA,CAEDE,QAAQ,GAAR,SAAAA,SAAA,EAAW;MACP,IAAI,CAACH,aAAa,CAACG,QAAQ,CAAC,CAAC;IACjC,CAAC;IAAAJ,eAAA,CAEMK,IAAI,GAAX,SAAAA,KAAYC,QAAgB,EAA0C;MAAA,IAA1DA,QAAgB;QAAhBA,QAAgB,GAAG,WAAW;MAAA;MACtC,OAAOC,KAAK,CAAC,gCAAgC,CAAC,CACzCC,IAAI,CAAC,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC;MAAA,EAAC,CACjCF,IAAI,CAAC,UAACG,OAA4B;QAAA,OAAK,IAAAC,cAAK,EAAC,IAAIC,MAAM,CAACF,OAAO,CAACG,QAAQ,CAACC,aAAa,CAAC,CAAC;MAAA,EAAC,CACzFP,IAAI,CAAC,UAACP,aAA4B,EAAK;QACpC,OAAOA,aAAa,CAACe,YAAY,CAACV,QAAQ,CAAC,CACtCE,IAAI,CAAC;UAAA,OAAM,IAAIR,eAAe,CAAEC,aAAc,CAAC;QAAA,EAAC;MACzD,CAAC,CAAC;IACV,CAAC;IAAA,OAAAD,eAAA;EAAA;EAAA,OAAAA,eAAA;AAAA"}