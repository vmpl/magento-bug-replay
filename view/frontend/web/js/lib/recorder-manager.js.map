{"version":3,"file":"recorder-manager.js","names":["RecorderManager","sessionWorker","paginator","_sessionPaginator","loadSessionFromWorker","bind","_proto","prototype","startRecord","self","stopRecord","rrweb","record","emit","event","post","init","instance","fetch","then","response","json","content","spawn","Worker","assetUrl","sessionLoader","initInstance","offset","limit","sessions","items","map","it","timestamp","Date","href","URL","title"],"sources":["../../ts/js/lib/recorder-manager.ts"],"sourcesContent":["import {spawn} from \"threads\";\nimport {RecordEvent, RecordSession, SessionWorker} from \"VMPL_BugReplay/js/api/session\";\nimport {ConfigWorkerContent} from \"VMPL_BugReplay/js/api/response\";\nimport SessionPaginator from \"VMPL_BugReplay/js/lib/session-paginator\";\n\nexport default class RecorderManager {\n    stopRecord: Function;\n    readonly paginator: SessionPaginator\n\n    protected constructor(\n        protected readonly sessionWorker: SessionWorker,\n    ) {\n        this.paginator = new SessionPaginator(this.loadSessionFromWorker.bind(this))\n    }\n\n    startRecord() {\n        ((self) => {\n            self.stopRecord = rrweb.record({\n                emit(event: RecordEvent) {\n                    self.sessionWorker.post(event);\n                }\n            })\n        })(this);\n    }\n\n    static init(instance: string = 'BugReplay'): Promise<RecorderManager> {\n        return fetch('/vmpl-bug-report/config/worker')\n            .then(response => response.json())\n            .then((content: ConfigWorkerContent) => spawn(new Worker(content.assetUrl.sessionLoader)))\n            .then((sessionWorker: SessionWorker) => {\n                return sessionWorker.initInstance(instance)\n                    .then(() => new RecorderManager(sessionWorker))\n            })\n    }\n\n    loadSessionFromWorker(offset: number, limit: number) {\n        return this.sessionWorker.sessions(offset, limit)\n            .then(items => items.map<RecordSession>(it => {\n                return {\n                    timestamp: new Date(it.timestamp),\n                    href: new URL(it.href),\n                    title: it.title,\n                }\n            }))\n    }\n}\n"],"mappings":";;;MAKqBA,eAAe;IAAA;;IAIhC,SAAAA,gBACuBC,aAA4B,EACjD;MAAA,KADqBA,aAA4B,GAA5BA,aAA4B;MAE/C,IAAI,CAACC,SAAS,GAAG,IAAAC,iBAAA,CAAqB,IAAI,CAACC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChF;IAAC,IAAAC,MAAA,GAAAN,eAAA,CAAAO,SAAA;IAAAD,MAAA,CAEDE,WAAW,GAAX,SAAAA,YAAA,EAAc;MACV,CAAC,UAACC,IAAI,EAAK;QACPA,IAAI,CAACC,UAAU,GAAGC,KAAK,CAACC,MAAM,CAAC;UAC3BC,IAAI,WAAAA,KAACC,KAAkB,EAAE;YACrBL,IAAI,CAACR,aAAa,CAACc,IAAI,CAACD,KAAK,CAAC;UAClC;QACJ,CAAC,CAAC;MACN,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC;IAAAd,eAAA,CAEMgB,IAAI,GAAX,SAAAA,KAAYC,QAAgB,EAA0C;MAAA,IAA1DA,QAAgB;QAAhBA,QAAgB,GAAG,WAAW;MAAA;MACtC,OAAOC,KAAK,CAAC,gCAAgC,CAAC,CACzCC,IAAI,CAAC,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC;MAAA,EAAC,CACjCF,IAAI,CAAC,UAACG,OAA4B;QAAA,OAAK,IAAAC,cAAK,EAAC,IAAIC,MAAM,CAACF,OAAO,CAACG,QAAQ,CAACC,aAAa,CAAC,CAAC;MAAA,EAAC,CACzFP,IAAI,CAAC,UAAClB,aAA4B,EAAK;QACpC,OAAOA,aAAa,CAAC0B,YAAY,CAACV,QAAQ,CAAC,CACtCE,IAAI,CAAC;UAAA,OAAM,IAAInB,eAAe,CAACC,aAAa,CAAC;QAAA,EAAC;MACvD,CAAC,CAAC;IACV,CAAC;IAAAK,MAAA,CAEDF,qBAAqB,GAArB,SAAAA,sBAAsBwB,MAAc,EAAEC,KAAa,EAAE;MACjD,OAAO,IAAI,CAAC5B,aAAa,CAAC6B,QAAQ,CAACF,MAAM,EAAEC,KAAK,CAAC,CAC5CV,IAAI,CAAC,UAAAY,KAAK;QAAA,OAAIA,KAAK,CAACC,GAAG,CAAgB,UAAAC,EAAE,EAAI;UAC1C,OAAO;YACHC,SAAS,EAAE,IAAIC,IAAI,CAACF,EAAE,CAACC,SAAS,CAAC;YACjCE,IAAI,EAAE,IAAIC,GAAG,CAACJ,EAAE,CAACG,IAAI,CAAC;YACtBE,KAAK,EAAEL,EAAE,CAACK;UACd,CAAC;QACL,CAAC,CAAC;MAAA,EAAC;IACX,CAAC;IAAA,OAAAtC,eAAA;EAAA;EAAA,OAAAA,eAAA;AAAA"}