{"version":3,"file":"session-database.js","names":["SessionDatabase","_dexie$Dexie","_inheritsLoose","databaseName","_this","call","prototype","version","_assertThisInitialized","stores","events","_proto","postRecord","record","add","getFullSnapshotsWithMeta","types","Array","of","EventType","FullSnapshot","valueOf","Meta","orderBy","reverse","filter","it","indexOf","type","toArray","getEvents","timestamp","_this2","limit","first","then","nextSession","Dexie"],"sources":["../../ts/js/lib/session-database.ts"],"sourcesContent":["// @ts-ignore\nimport {Dexie} from \"dexie\";\nimport {EventType, IRecordEvent} from \"VMPL_BugReplay/js/api/session\";\n\nexport default class SessionDatabase extends Dexie {\n    events!: Dexie.Table<IRecordEvent, number>;\n\n    constructor(databaseName: string) {\n        super(databaseName);\n        super.version(1).stores({\n            events: 'timestamp,type,data',\n        });\n        super.version(2).stores({\n            events: '&timestamp,*type,data',\n        })\n    }\n\n    postRecord(record: IRecordEvent): Promise<IRecordEvent> {\n        return this.events.add(record);\n    }\n\n    getFullSnapshotsWithMeta(): Promise<IRecordEvent[]> {\n        const types: number[] = Array.of(EventType.FullSnapshot.valueOf(), EventType.Meta.valueOf());\n        return this.events\n            .orderBy('timestamp').reverse()\n            .filter((it: IRecordEvent) => types.indexOf(it.type.valueOf()) !== -1)\n            .toArray();\n    }\n\n    getEvents(timestamp: number): Promise<IRecordEvent[]> {\n        return this.events\n            .orderBy('timestamp').reverse()\n            .filter((it: IRecordEvent) => it.timestamp > timestamp)\n            .limit(1)\n            .first()\n            .then((nextSession: IRecordEvent) => {\n                return this.events\n                    .orderBy('timestamp').reverse()\n                    .filter((it: IRecordEvent) => it.timestamp >= timestamp && it.timestamp < nextSession.timestamp)\n                    .toArray()\n            })\n    }\n}\n"],"mappings":";;;;;;EAAA;EAAA,IAIqBA,eAAe,0BAAAC,YAAA;IAAA;;IAAAC,cAAA,CAAAF,eAAA,EAAAC,YAAA;IAGhC,SAAAD,gBAAYG,YAAoB,EAAE;MAAA,IAAAC,KAAA;MAC9BA,KAAA,GAAAH,YAAA,CAAAI,IAAA,OAAMF,YAAY,CAAC;MACnBF,YAAA,CAAAK,SAAA,CAAMC,OAAO,CAAAF,IAAA,CAAAG,sBAAA,CAAAJ,KAAA,GAAC,CAAC,EAAEK,MAAM,CAAC;QACpBC,MAAM,EAAE;MACZ,CAAC,CAAC;MACFT,YAAA,CAAAK,SAAA,CAAMC,OAAO,CAAAF,IAAA,CAAAG,sBAAA,CAAAJ,KAAA,GAAC,CAAC,EAAEK,MAAM,CAAC;QACpBC,MAAM,EAAE;MACZ,CAAC,CAAC;MAAA,OAAAN,KAAA;IACN;IAAC,IAAAO,MAAA,GAAAX,eAAA,CAAAM,SAAA;IAAAK,MAAA,CAEDC,UAAU,GAAV,SAAAA,WAAWC,MAAoB,EAAyB;MACpD,OAAO,IAAI,CAACH,MAAM,CAACI,GAAG,CAACD,MAAM,CAAC;IAClC,CAAC;IAAAF,MAAA,CAEDI,wBAAwB,GAAxB,SAAAA,yBAAA,EAAoD;MAChD,IAAMC,KAAe,GAAGC,KAAK,CAACC,EAAE,CAACC,kBAAS,CAACC,YAAY,CAACC,OAAO,CAAC,CAAC,EAAEF,kBAAS,CAACG,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;MAC5F,OAAO,IAAI,CAACX,MAAM,CACba,OAAO,CAAC,WAAW,CAAC,CAACC,OAAO,CAAC,CAAC,CAC9BC,MAAM,CAAC,UAACC,EAAgB;QAAA,OAAKV,KAAK,CAACW,OAAO,CAACD,EAAE,CAACE,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;MAAA,EAAC,CACrEQ,OAAO,CAAC,CAAC;IAClB,CAAC;IAAAlB,MAAA,CAEDmB,SAAS,GAAT,SAAAA,UAAUC,SAAiB,EAA2B;MAAA,IAAAC,MAAA;MAClD,OAAO,IAAI,CAACtB,MAAM,CACba,OAAO,CAAC,WAAW,CAAC,CAACC,OAAO,CAAC,CAAC,CAC9BC,MAAM,CAAC,UAACC,EAAgB;QAAA,OAAKA,EAAE,CAACK,SAAS,GAAGA,SAAS;MAAA,EAAC,CACtDE,KAAK,CAAC,CAAC,CAAC,CACRC,KAAK,CAAC,CAAC,CACPC,IAAI,CAAC,UAACC,WAAyB,EAAK;QACjC,OAAOJ,MAAI,CAACtB,MAAM,CACba,OAAO,CAAC,WAAW,CAAC,CAACC,OAAO,CAAC,CAAC,CAC9BC,MAAM,CAAC,UAACC,EAAgB;UAAA,OAAKA,EAAE,CAACK,SAAS,IAAIA,SAAS,IAAIL,EAAE,CAACK,SAAS,GAAGK,WAAW,CAACL,SAAS;QAAA,EAAC,CAC/FF,OAAO,CAAC,CAAC;MAClB,CAAC,CAAC;IACV,CAAC;IAAA,OAAA7B,eAAA;EAAA,EArCwCqC,YAAK;EAAA,OAAArC,eAAA;AAAA"}