{"version":3,"file":"worker.js","names":["_database","_interopRequireDefault","_axios","_errorConsole","_dec","_class","obj","__esModule","default","Worker","WorkerConsumer","_proto","prototype","initInstance","instance","database","SessionDatabase","Promise","resolve","post","event","_this","type","flushBuffer","then","sessionId","buffer","put","sessions","offset","limit","filter","orderBy","reverse","toArray","match","bind","count","length","items","slice","map","it","RecordSession","title","href","timestamp","id","uploaded","meta","totalRecords","events","sessionsIds","Number","isInteger","where","anyOf","export","_export","_this2","sessionIds","table","value","key","includes","blob","body","FormData","append","File","axios","response","data","_ref","fileName","all","update","import","_import","url","_this3","get","responseType","acceptNameDiff","delete","_delete","_this4","sessionError","transaction","errors","bulkDelete","errorId","_this5","equals","EventType","Meta","first","FullSnapshot","createBufferErrorDigests","_ref2","snapshot","errorConsoles","tagMetaTitle","node","childNodes","find","tagName","_it$attributes","attributes","name","_tagMetaTitle$attribu","_tagMetaTitle$attribu2","content","bulkPut","allKeys","_ref3","errorKeys","errorIds","push","apply","bulkAdd","clear","_this6","textEncoder","TextEncoder","textDecoder","TextDecoder","and","plugin","startsWith","payload","level","errorEvents","crypto","subtle","digest","encode","JSON","stringify","results","errorMap","Map","forEach","_ref4","set","decode","digests","Array","from","keys","consoleErrors","some","ErrorConsole","shift","session"],"sources":["../../../ts/js/bug-replay/session/worker.ts"],"sourcesContent":["import {\n    EventType,\n    IRecordEvent, IRecordSession,\n    SessionWorker as SessionWorkerInterface,\n} from 'VMPL_BugReplay/js/api/session'\nimport SessionDatabase from \"VMPL_BugReplay/js/bug-replay/session/database\";\nimport {IPaginatorFilter, IPaginatorResponse} from \"VMPL_BugReplay/js/api/paginator\";\nimport {WorkerConsumer} from \"VMPL_BugReplay/js/lib/worker/consumer\";\nimport axios from \"axios\";\nimport {RecordSession} from \"VMPL_BugReplay/js/bug-replay/session/model/record-session\";\nimport {error} from \"consoleLogger\";\nimport ErrorConsole from \"VMPL_BugReplay/js/bug-replay/session/model/error-console\";\n\n@WorkerConsumer()\nclass Worker implements SessionWorkerInterface {\n    protected database: SessionDatabase;\n\n    initInstance(instance: string): Promise<void> {\n        this.database = new SessionDatabase(instance);\n        return Promise.resolve();\n    }\n\n    post(event: IRecordEvent): Promise<number> {\n        return (event.type <= 2\n            ? this.flushBuffer()\n            : Promise.resolve(0))\n            .then(sessionId => {\n                return this.database.buffer.put(event)\n                    .then(() => sessionId);\n            })\n    }\n\n    sessions(\n        offset: number = 0,\n        limit: number, filter: IPaginatorFilter<IRecordSession>\n    ): Promise<IPaginatorResponse<RecordSession>> {\n        return this.database.sessions\n            .orderBy('timestamp')\n            .reverse()\n            .toArray()\n            .then(filter.match.bind(filter))\n            .then(sessions => {\n                const count = sessions.length;\n                return {\n                    items: sessions.slice(offset, offset + limit).map(it => new RecordSession(\n                        it.title,\n                        it.href,\n                        it.timestamp,\n                        it.id,\n                        it.uploaded,\n                    )),\n                    meta: {\n                        totalRecords: count,\n                    }\n                }\n            })\n    }\n\n    events(sessions: IRecordSession[]): Promise<IPaginatorResponse<IRecordEvent>> {\n        const sessionsIds = sessions\n            .map(it => it.id)\n            .filter(it => Number.isInteger(it))\n\n        return this.database.events\n            .where('sessionId')\n            .anyOf(sessionsIds)\n            .toArray()\n            .then(events => {\n                return <IPaginatorResponse<IRecordEvent>>{\n                    items: events,\n                    meta: {\n                        totalRecords: events.length,\n                    }\n                }\n            })\n    }\n\n    export(sessions: IRecordSession[]): Promise<number[]> {\n        const sessionIds = sessions\n            .filter(it => it?.id && !it?.uploaded)\n            .map(it => it.id);\n\n        if (!sessionIds.length) {\n            return Promise.resolve([]);\n        }\n\n        return this.database.export({\n            filter: (table: string, value: any, key?: any): boolean => {\n                switch (table) {\n                    case 'sessions':\n                        return sessionIds.includes((<IRecordSession>value).id);\n                    case 'events':\n                        return sessionIds.includes((<IRecordEvent>value).sessionId);\n                    default:\n                        return false;\n                }\n            },\n        }).then(blob => {\n            const body = new FormData();\n            body.append('database', new File([blob], 'database.json'), 'database.json');\n            return axios.post('/vmpl-bug-replay/session/upload', body)\n                .then(response => response.data);\n        }).then(({fileName}) => {\n            return Promise.all(\n                sessionIds\n                    .map(id => {\n                        return this.database.sessions.update(id, {uploaded: fileName})\n                    }),\n            );\n        })\n    }\n\n    import(url: string): Promise<void> {\n        return axios.get(url, {responseType: 'blob'})\n            .then(response => this.database.import(response.data, {acceptNameDiff: true}))\n    }\n\n    delete(sessions: IRecordSession[]): Promise<void> {\n        const sessionIds = sessions.map(it => it.id).filter(it => !!it);\n\n        const sessionError = this.database.table('sessionError');\n        return this.database.transaction('rw', [\n            this.database.events,\n            this.database.sessions,\n            this.database.errors,\n            sessionError,\n        ], () => {\n            return sessionError.where('sessionId').anyOf(sessionIds).toArray()\n                .then((items: {errorId: string}[]) => {\n                    return Promise.all([\n                        this.database.sessions.bulkDelete(sessionIds),\n                        this.database.events\n                            .where('sessionId')\n                            .anyOf(sessionIds)\n                            .delete(),\n                        this.database.errors.bulkDelete(items.map(it => it.errorId)),\n                        sessionError.where('sessionId').anyOf(sessionIds).delete(),\n                    ])\n                })\n                .then()\n        });\n    }\n\n    /**\n     * @private\n     * @return number when buffer has event with error in the console otherwise zero\n     */\n    private flushBuffer(): Promise<number> {\n        return Promise.all([\n            this.database.buffer.where('type').equals(EventType.Meta).first(),\n            this.database.buffer.where('type').equals(EventType.FullSnapshot).first(),\n            this.createBufferErrorDigests(),\n        ]).then(([meta, snapshot, errorConsoles]) => {\n            const tagMetaTitle = snapshot?.data.node\n                .childNodes.find((it: any) => it?.tagName === 'html')\n                .childNodes.find((it: any) => it?.tagName === 'head')\n                .childNodes.find((it: any) => it?.attributes?.name === 'title')\n\n            const sessionError = this.database.table('sessionError');\n            return this.database.transaction('rw', [\n                this.database.buffer,\n                this.database.events,\n                this.database.sessions,\n                this.database.errors,\n                sessionError,\n            ], () => {\n                return Promise.all([\n                    this.database.sessions.put({\n                        href: meta.data.href,\n                        title: tagMetaTitle?.attributes?.content ?? 'Unknown',\n                        timestamp: meta.timestamp,\n                    }),\n                    this.database.errors.bulkPut(errorConsoles.filter(it => !it.id), {allKeys: true}),\n                ]).then(([sessionId, errorKeys]) => {\n                    const errorIds =  errorKeys.map(it => ~~it);\n                    errorIds.push(...errorConsoles.filter(it => !!it.id).map(it => it.id))\n\n                    return Promise.all([\n                        sessionError.bulkAdd(errorIds\n                            .map(errorId => { return {sessionId, errorId} })),\n                        this.database.buffer\n                            .toArray()\n                            .then(events => events.map(it => {\n                                it.sessionId = sessionId;\n                                return it;\n                            }))\n                            .then(events => this.database.events.bulkPut(events)),\n                    ])\n                        .then(() => this.database.buffer.clear())\n                        .then(() => !errorConsoles.length ? 0 : sessionId);\n                })\n            })\n        })\n    }\n\n    private createBufferErrorDigests(): Promise<ErrorConsole[]> {\n        const textEncoder = new TextEncoder();\n        const textDecoder = new TextDecoder();\n\n        return this.database.buffer\n            .where('type').equals(6)\n            .and(it => {\n                return it.data.plugin.startsWith('rrweb/console')\n                    && it.data.payload.level === 'error';\n            }).toArray()\n                .then(errorEvents => Promise.all(errorEvents\n                        .map(event => Promise.all([event,\n                            crypto.subtle.digest('SHA-1', textEncoder.encode(JSON.stringify(event.data.payload)))])))\n                )\n                .then(results => {\n                    const errorMap = new Map<string, IRecordEvent>();\n                    results.forEach(([event, digest]) => {\n                        errorMap.set(textDecoder.decode(digest), event)\n                    });\n                    return errorMap;\n                })\n                .then(digests => {\n                    return this.database.errors.where('digest').anyOf(Array.from(digests.keys())).toArray()\n                        .then(consoleErrors => {\n                            digests.forEach((event, digest) => {\n                                if (!consoleErrors.some(it => it.digest === digest)) {\n                                    consoleErrors.push(new ErrorConsole(digest, event.data.payload.payload.shift()))\n                                }\n                            })\n                            return consoleErrors;\n                        })\n                })\n                .then(consoleErrors => {\n                    return this.database.table('sessionError')\n                        .where('errorId')\n                        .anyOf(consoleErrors.map(it => it.id))\n                        .toArray()\n                        .then((items: {sessionId: number, errorId: number}[]) => {\n                            return this.database.sessions\n                                .where('id')\n                                .anyOf(items.map(it => it.sessionId))\n                                .and(it => !!(it.uploaded && it.uploaded.length))\n                                .toArray()\n                                .then(sessions => items\n                                    .filter(it => sessions\n                                        .some(session => session.id == it.sessionId))\n                                            .map(it => it.errorId))\n                        })\n                        .then(items => consoleErrors.filter(it => !items.includes(it.id)))\n                })\n    }\n}\n\n(new Worker());\n"],"mappings":"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"}