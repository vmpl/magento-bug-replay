{"version":3,"file":"recorder-manager.js","names":["RecorderManager","sessionWorker","paginator","_itemsPaginator","_proto","prototype","startRecord","self","stopRecord","rrwebRecord","emit","event","post","plugins","rrwebConsoleRecord","getRecordConsolePlugin","init","endpoint","instance","urlWorker","URL","location","origin","pathname","WorkerClient","toString","then","initInstance","downloadImport","request","_this","import","getEventsForSessionAt","sessions","events","response","items","uploadSessions","_this2","export","clear","deleteAt","at","_this3","fetch","session","delete","_delete","_this4","loadPaginatorItems","offset","limit","filter"],"sources":["../../ts/js/lib/recorder-manager.ts"],"sourcesContent":["import {IRecordEvent, IRecordSession, SessionWorker} from \"VMPL_BugReplay/js/api/session\";\nimport {ConfigWorkerContent} from \"VMPL_BugReplay/js/api/response\";\nimport ItemPaginator from \"VMPL_BugReplay/js/lib/items-paginator\";\nimport {IPaginatorFilter, IPaginatorLoader, IPaginatorResponse} from \"VMPL_BugReplay/js/api/paginator\";\nimport {WorkerClient} from \"VMPL_BugReplay/js/lib/worker/client\";\nimport {RecordSession} from \"VMPL_BugReplay/js/lib/session/model/record-session\";\n\ndeclare const rrwebRecord: Function;\ndeclare const rrwebConsoleRecord: { getRecordConsolePlugin: Function };\n\nexport default class RecorderManager implements IPaginatorLoader<IRecordSession> {\n    readonly paginator: ItemPaginator<RecordSession, RecorderManager>;\n    stopRecord: Function;\n\n    protected constructor(\n        protected readonly sessionWorker: SessionWorker,\n    ) {\n        this.paginator = new ItemPaginator([], this);\n    }\n\n    startRecord() {\n        ((self) => {\n            self.stopRecord = rrwebRecord({\n                emit(event: IRecordEvent) {\n                    self.sessionWorker.post(event);\n                },\n                plugins: [rrwebConsoleRecord.getRecordConsolePlugin()]\n            })\n        })(this);\n    }\n\n    static init(endpoint: string, instance: string = 'BugReplay'): Promise<RecorderManager> {\n        const urlWorker = new URL(location.origin);\n        urlWorker.pathname = `${endpoint}/VMPL_BugReplay/js/lib/session/worker`;\n\n        return WorkerClient<SessionWorker>(urlWorker.toString())\n            .then((sessionWorker: SessionWorker) => {\n                return sessionWorker.initInstance(instance)\n                    .then(() => new RecorderManager(sessionWorker))\n            })\n    }\n\n    downloadImport(request: URL): Promise<RecorderManager> {\n        return this.sessionWorker.import(request.toString())\n            .then(() => this);\n    }\n\n    getEventsForSessionAt(sessions: IRecordSession[]): Promise<IRecordEvent[]> {\n        return this.sessionWorker.events(sessions)\n            .then(response => response.items);\n    }\n\n    uploadSessions(sessions: IRecordSession[]): Promise<void> {\n        return this.sessionWorker.export(sessions)\n            .then(() => this.paginator.clear())\n    }\n\n    deleteAt(at: number): Promise<void> {\n        return this.paginator.fetch(at)\n            .then(session => this.delete([session]));\n    }\n\n    delete(sessions: RecordSession[]): Promise<void> {\n        return this.sessionWorker.delete(sessions)\n            .then(() => this.paginator.clear());\n    }\n\n    loadPaginatorItems(\n        offset: number,\n        limit: number,\n        filter: IPaginatorFilter<IRecordSession>,\n    ): Promise<IPaginatorResponse<RecordSession>> {\n        return this.sessionWorker.sessions(offset, limit, filter);\n    }\n}\n"],"mappings":"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"}